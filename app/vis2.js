// Generated by CoffeeScript 1.7.1
(function() {
  var Main, Shader, createGeometry, createOrbitViewer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.THREE = require("three");

  createGeometry = require('three-bmfont-text');

  Shader = require("./shaders/sdf");

  createOrbitViewer = require('three-orbit-viewer')(THREE);

  Main = (function() {
    function Main() {
      this.animate = __bind(this.animate, this);
      var edges, geometry, grid_helper, helper, light, object;
      this.renderer = new THREE.WebGLRenderer();
      this.renderer.setPixelRatio(window.devicePixelRatio);
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.setClearColor("#eeeeee");
      document.body.appendChild(this.renderer.domElement);
      this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
      this.camera.position.z = 2;
      this.camera.position.x = -1;
      this.camera.position.y = 1;
      this.scene = new THREE.Scene();
      light = new THREE.PointLight();
      light.position.set(200, 100, 150);
      this.scene.add(light);
      helper = new THREE.AxisHelper(50);
      this.scene.add(helper);
      grid_helper = new THREE.GridHelper(20, 10);
      this.scene.add(grid_helper);
      geometry = new THREE.BoxGeometry(10, 10, 10, 2, 2, 2);
      object = new THREE.Mesh(geometry);
      edges = new THREE.EdgesHelper(object, 0x00ff00);
      this.textAnchor = new THREE.Object3D();
    }

    Main.prototype.setTexture = function(texture) {
      var maxAni;
      this.texture = texture;
      maxAni = this.renderer.getMaxAnisotropy();
      this.texture.needsUpdate = true;
      this.texture.minFilter = THREE.LinearMipMapLinearFilter;
      this.texture.magFilter = THREE.LinearFilter;
      this.texture.generateMipmaps = true;
      return this.texture.anisotropy = maxAni;
    };

    Main.prototype.setFont = function(font) {
      this.font = font;
    };

    Main.prototype.tempAddText = function(text) {
      var geometry, material, mesh;
      geometry = createGeometry({
        text: text,
        font: this.font
      });
      material = new THREE.ShaderMaterial(Shader({
        map: this.texture,
        smooth: 1 / 32,
        side: THREE.DoubleSide,
        transparent: false,
        color: 'rgb(10, 10, 10)'
      }));
      mesh = new THREE.Mesh(geometry, material);
      this.textAnchor.add(mesh);
      this.textAnchor.scale.multiplyScalar(-0.005);
      return this.scene.add(this.textAnchor);
    };

    Main.prototype.animate = function() {
      requestAnimationFrame(this.animate);
      return this.renderer.render(this.scene, this.camera);
    };

    return Main;

  })();

  module.exports = Main;

}).call(this);
